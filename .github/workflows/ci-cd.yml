name: CI / CD

on:
  push:
    branches: [ main, master ]

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Display environment info
        run: |
          echo "### Environment Information ###"
          echo "GitHub Runner OS: $(uname -a)"
          echo "Working Directory: $(pwd)"
          echo "Contents:"
          ls -la
          echo "Docker Info:"
          docker info

      - name: Verify AWS credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "### Verifying AWS credentials ###"
          # Only run if all required secrets are present
          if [ -n "$AWS_ACCESS_KEY_ID" ] && [ -n "$AWS_SECRET_ACCESS_KEY" ] && [ -n "$AWS_REGION" ]; then
            aws sts get-caller-identity
            echo "AWS credentials verified successfully"
          else
            echo "WARNING: AWS credentials not fully configured - deployment steps will not work"
            echo "Please configure AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, and AWS_REGION in GitHub secrets"
          fi

      - name: Build CLine toolbox image
        run: |
          echo "### Building CLine toolbox Docker image ###"
          # Use a single build command with --no-cache for reliability
          docker build --no-cache -t cline-toolbox:latest -f Dockerfile.toolbox .
          docker images

      - name: Test CLine in container
        run: |
          echo "### Testing CLine in container ###"
          docker run --rm cline-toolbox:latest bash -c "which cline || echo 'cline not found'; cline --version || echo 'cline version failed'; env | grep PATH"

      - name: Run simple container command
        run: |
          echo "### Testing basic container functionality ###"
          docker run --rm -v "$(pwd):/app" -w /app cline-toolbox:latest bash -c "echo 'Test from container' > test_output.txt"
          cat test_output.txt
          rm test_output.txt

      - name: Print deploy.sh content
        run: |
          echo "### Content of deploy.sh ###"
          cat deploy.sh

      - name: Print build_and_deploy.sh content
        run: |
          echo "### Content of build_and_deploy.sh ###"
          cat build_and_deploy.sh

      - name: Run build and deploy in container with detailed logging
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          echo "### Running build_and_deploy.sh inside Docker container with DEBUG ###"
          
          # Create a wrapper script with debug output
          cat > debug_wrapper.sh << 'EOF'
          #!/bin/bash
          set -x  # Enable command echo
          
          # Verify environment
          echo "Inside container environment:"
          env | sort
          
          echo "Container working directory: $(pwd)"
          echo "Container files:"
          ls -la
          
          echo "Running build_and_deploy.sh"
          bash -x ./build_and_deploy.sh || echo "Script exited with code $?"
          EOF
          
          chmod +x debug_wrapper.sh
          
          # Create environment file - exclude single/double quotes
          env | grep -v ' \|"' > ci_env.list
          
          # Run with detailed logging - execute both scripts inside container
          docker run --rm \
            -v "$(pwd):/app" \
            -w /app \
            -e AWS_ACCESS_KEY_ID \
            -e AWS_SECRET_ACCESS_KEY \
            -e AWS_REGION \
            -e ECR_REPOSITORY \
            -e GITHUB_SHA \
            --env-file ci_env.list \
            cline-toolbox:latest \
            bash -c "chmod +x debug_wrapper.sh build_and_deploy.sh && ./debug_wrapper.sh"
          
          # Clean up temp file
          rm ci_env.list
