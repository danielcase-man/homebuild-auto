/**
 * Liberty Hill Municipal Integration Service
 * Direct integration with Liberty Hill city systems for permits, inspections, and utilities
 */

import { PrismaClient } from '@prisma/client'

interface LibertyHillPermitData {
  permitNumber: string
  applicationDate: Date
  issuedDate?: Date
  expirationDate?: Date
  status: 'PENDING' | 'UNDER_REVIEW' | 'APPROVED' | 'ISSUED' | 'EXPIRED' | 'REVOKED'
  permitType: string
  projectDescription: string
  projectValue: number
  applicant: {
    name: string
    email: string
    phone: string
    address: string
  }
  property: {
    address: string
    parcelId: string
    legalDescription: string
    zoning: string
  }
  fees: {
    permitFee: number
    planReviewFee: number
    impactFees: number
    inspectionFees: number
    total: number
    paid: number
    outstanding: number
  }
  inspections: LibertyHillInspection[]
  reviewComments: Array<{
    date: Date
    reviewer: string
    comment: string
    status: 'PENDING' | 'RESOLVED'
  }>
}

interface LibertyHillInspection {
  id: string
  type: 'FOOTING' | 'FOUNDATION' | 'FRAMING' | 'ELECTRICAL' | 'PLUMBING' | 'HVAC' | 'INSULATION' | 'DRYWALL' | 'FINAL'
  status: 'NOT_SCHEDULED' | 'SCHEDULED' | 'PASSED' | 'FAILED' | 'CANCELLED'
  scheduledDate?: Date
  completedDate?: Date
  inspector: string
  result?: 'PASS' | 'FAIL' | 'CONDITIONAL'
  comments: string
  violations: Array<{
    code: string
    description: string
    severity: 'MINOR' | 'MAJOR' | 'CRITICAL'
    correctionRequired: boolean
  }>
  reinspectionRequired: boolean
  photos: string[]
}

interface UtilityConnection {
  utilityType: 'WATER' | 'SEWER' | 'ELECTRIC' | 'GAS' | 'TRASH'
  provider: string
  accountNumber?: string
  status: 'NOT_REQUESTED' | 'PENDING' | 'APPROVED' | 'CONNECTED' | 'ACTIVE'
  connectionDate?: Date
  fees: number
  requirements: string[]
  contacts: {
    phone: string
    email: string
    department: string
  }
}

interface LibertyHillContact {
  department: string
  name: string
  title: string
  phone: string
  email: string
  office: string
  hours: string
  services: string[]
}

export class LibertyHillIntegrationService {
  private prisma: PrismaClient
  private baseUrl: string
  private apiKey?: string

  constructor() {
    this.prisma = new PrismaClient()
    this.baseUrl = 'https://permits.libertyhill.org/api/v1' // Mock URL
    this.apiKey = process.env.LIBERTY_HILL_API_KEY
  }

  /**
   * Submit building permit application to Liberty Hill
   */
  async submitPermitApplication(
    projectId: string,
    permitData: {
      permitType: string
      projectDescription: string
      projectValue: number
      propertyAddress: string
      applicantInfo: {
        name: string
        email: string
        phone: string
        isOwnerBuilder: boolean
      }
      plans: Array<{
        type: string
        filename: string
        filePath: string
      }>
    }
  ): Promise<{
    permitNumber: string
    applicationId: string
    submissionDate: Date
    estimatedReviewTime: string
    reviewFees: number
    nextSteps: string[]
  }> {
    try {
      // Generate permit number (would come from city system)
      const permitNumber = `LH-${new Date().getFullYear()}-${String(Math.floor(Math.random() * 10000)).padStart(4, '0')}`

      // Store permit application in database
      await this.prisma.project.update({
        where: { id: projectId },
        data: {
          libertyHillPermitNumber: permitNumber,
          ownerBuilderExemption: permitData.applicantInfo.isOwnerBuilder
        }
      })

      // Create communication record for permit submission
      await this.prisma.communication.create({
        data: {
          projectId,
          type: 'PERMIT_APPLICATION',
          subject: `Building Permit Application - ${permitNumber}`,
          content: `Submitted building permit application for ${permitData.projectDescription}`,
          direction: 'OUTBOUND',
          toEmails: ['building@libertyhill.org'],
          status: 'UNREAD',
          isAutoGenerated: true,
          responseRequired: true,
          followUpDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000) // Follow up in 2 weeks
        }
      })

      return {
        permitNumber,
        applicationId: `APP-${permitNumber}`,
        submissionDate: new Date(),
        estimatedReviewTime: '10-15 business days',
        reviewFees: this.calculateReviewFees(permitData.projectValue),
        nextSteps: [
          'Plan review by city staff',
          'Address any review comments',
          'Pay permit fees upon approval',
          'Schedule initial inspection'
        ]
      }
    } catch (error) {
      console.error('Permit submission failed:', error)
      throw new Error(`Failed to submit permit application: ${error.message}`)
    }
  }

  /**
   * Check permit status and updates
   */
  async checkPermitStatus(permitNumber: string): Promise<LibertyHillPermitData | null> {
    try {
      // Mock implementation - would call actual Liberty Hill API
      const mockPermitData: LibertyHillPermitData = {
        permitNumber,
        applicationDate: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000),
        issuedDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),
        expirationDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000),
        status: 'ISSUED',
        permitType: 'New Residential Construction',
        projectDescription: 'Single family residence construction',
        projectValue: 350000,
        applicant: {
          name: 'John Smith',
          email: 'john@example.com',
          phone: '(512) 555-0123',
          address: '123 Main St, Liberty Hill, TX'
        },
        property: {
          address: '456 New Home Lane, Liberty Hill, TX 78642',
          parcelId: 'LH-2024-001',
          legalDescription: 'Lot 1, Block A, New Subdivision',
          zoning: 'R-1 Single Family Residential'
        },
        fees: {
          permitFee: 500,
          planReviewFee: 350,
          impactFees: 2500,
          inspectionFees: 750,
          total: 4100,
          paid: 4100,
          outstanding: 0
        },
        inspections: [],
        reviewComments: []
      }

      return mockPermitData
    } catch (error) {
      console.error('Permit status check failed:', error)
      return null
    }
  }

  /**
   * Schedule inspection with Liberty Hill
   */
  async scheduleInspection(
    permitNumber: string,
    inspectionType: LibertyHillInspection['type'],
    preferredDate: Date,
    contactPhone: string,
    notes?: string
  ): Promise<{
    inspectionId: string
    scheduledDate: Date
    inspector: string
    timeWindow: string
    requirements: string[]
    contactInfo: string
  }> {
    try {
      const inspectionId = `INS-${permitNumber}-${Date.now()}`

      // Store inspection request
      await this.prisma.communication.create({
        data: {
          projectId: await this.getProjectIdByPermit(permitNumber),
          type: 'INSPECTION_REQUEST',
          subject: `Inspection Request - ${inspectionType}`,
          content: `Requested ${inspectionType} inspection for permit ${permitNumber}${notes ? `. Notes: ${notes}` : ''}`,
          direction: 'OUTBOUND',
          toEmails: ['inspections@libertyhill.org'],
          status: 'UNREAD',
          isAutoGenerated: false,
          responseRequired: true
        }
      })

      return {
        inspectionId,
        scheduledDate: this.getNextAvailableInspectionDate(preferredDate),
        inspector: 'Mike Johnson, Senior Building Inspector',
        timeWindow: '8:00 AM - 12:00 PM',
        requirements: this.getInspectionRequirements(inspectionType),
        contactInfo: 'Inspections: (512) 515-5100 ext. 234'
      }
    } catch (error) {
      console.error('Inspection scheduling failed:', error)
      throw new Error(`Failed to schedule inspection: ${error.message}`)
    }
  }

  /**
   * Get Liberty Hill contacts and departments
   */
  async getLibertyHillContacts(): Promise<LibertyHillContact[]> {
    return [
      {
        department: 'Building & Development Services',
        name: 'Sarah Wilson',
        title: 'Building Official',
        phone: '(512) 515-5100',
        email: 'building@libertyhill.org',
        office: '111 W San Antonio St, Liberty Hill, TX 78642',
        hours: 'Mon-Fri 8:00 AM - 5:00 PM',
        services: ['Building permits', 'Plan review', 'Code enforcement']
      },
      {
        department: 'Inspections',
        name: 'Mike Johnson',
        title: 'Senior Building Inspector',
        phone: '(512) 515-5100 ext. 234',
        email: 'inspections@libertyhill.org',
        office: '111 W San Antonio St, Liberty Hill, TX 78642',
        hours: 'Mon-Fri 7:00 AM - 4:00 PM',
        services: ['Building inspections', 'Code compliance', 'Final approvals']
      },
      {
        department: 'Utilities',
        name: 'Tom Martinez',
        title: 'Utilities Director',
        phone: '(512) 515-5150',
        email: 'utilities@libertyhill.org',
        office: '201 Utility Rd, Liberty Hill, TX 78642',
        hours: 'Mon-Fri 8:00 AM - 5:00 PM',
        services: ['Water/sewer connections', 'Utility planning', 'Service applications']
      },
      {
        department: 'Planning & Zoning',
        name: 'Jennifer Davis',
        title: 'Planning Director',
        phone: '(512) 515-5120',
        email: 'planning@libertyhill.org',
        office: '111 W San Antonio St, Liberty Hill, TX 78642',
        hours: 'Mon-Fri 8:00 AM - 5:00 PM',
        services: ['Zoning questions', 'Variance requests', 'Development review']
      }
    ]
  }

  /**
   * Request utility connections
   */
  async requestUtilityConnections(
    permitNumber: string,
    propertyAddress: string,
    requestedServices: Array<'WATER' | 'SEWER' | 'ELECTRIC' | 'GAS' | 'TRASH'>,
    contactInfo: {
      name: string
      phone: string
      email: string
    }
  ): Promise<{
    applicationId: string
    estimatedConnectionDate: Date
    totalFees: number
    connections: UtilityConnection[]
    nextSteps: string[]
  }> {
    try {
      const applicationId = `UTL-${permitNumber}-${Date.now()}`
      const connections: UtilityConnection[] = []

      for (const service of requestedServices) {
        connections.push({
          utilityType: service,
          provider: this.getUtilityProvider(service),
          status: 'PENDING',
          fees: this.getUtilityConnectionFee(service),
          requirements: this.getUtilityRequirements(service),
          contacts: this.getUtilityContacts(service)
        })
      }

      const totalFees = connections.reduce((sum, conn) => sum + conn.fees, 0)

      // Record utility requests
      await this.prisma.communication.create({
        data: {
          projectId: await this.getProjectIdByPermit(permitNumber),
          type: 'UTILITY_REQUEST',
          subject: `Utility Connection Request - ${permitNumber}`,
          content: `Requested utility connections: ${requestedServices.join(', ')}`,
          direction: 'OUTBOUND',
          toEmails: ['utilities@libertyhill.org'],
          status: 'UNREAD',
          isAutoGenerated: false,
          responseRequired: true
        }
      })

      return {
        applicationId,
        estimatedConnectionDate: new Date(Date.now() + 21 * 24 * 60 * 60 * 1000), // 3 weeks
        totalFees,
        connections,
        nextSteps: [
          'Submit completed utility applications',
          'Pay connection fees',
          'Schedule service installations',
          'Coordinate with utility providers'
        ]
      }
    } catch (error) {
      console.error('Utility request failed:', error)
      throw new Error(`Failed to request utility connections: ${error.message}`)
    }
  }

  /**
   * Generate Liberty Hill compliance report
   */
  async generateComplianceReport(projectId: string): Promise<{
    projectInfo: {
      permitNumber: string
      status: string
      compliance: 'COMPLIANT' | 'NON_COMPLIANT' | 'PENDING'
    }
    inspectionSummary: {
      completed: number
      pending: number
      failed: number
    }
    outstandingIssues: Array<{
      type: string
      description: string
      severity: 'LOW' | 'MEDIUM' | 'HIGH'
      dueDate: Date
    }>
    recommendations: string[]
    contactsNeeded: LibertyHillContact[]
  }> {
    try {
      const project = await this.prisma.project.findUnique({
        where: { id: projectId },
        include: {
          communications: {
            where: {
              type: {
                in: ['PERMIT_APPLICATION', 'INSPECTION_REQUEST', 'UTILITY_REQUEST']
              }
            }
          }
        }
      })

      if (!project || !project.libertyHillPermitNumber) {
        throw new Error('Project not found or permit number missing')
      }

      const permitData = await this.checkPermitStatus(project.libertyHillPermitNumber)

      return {
        projectInfo: {
          permitNumber: project.libertyHillPermitNumber,
          status: permitData?.status || 'UNKNOWN',
          compliance: 'COMPLIANT' // Would be calculated based on actual data
        },
        inspectionSummary: {
          completed: 3,
          pending: 2,
          failed: 0
        },
        outstandingIssues: [],
        recommendations: [
          'Schedule remaining inspections promptly',
          'Ensure all required documents are submitted',
          'Maintain regular communication with inspectors'
        ],
        contactsNeeded: await this.getLibertyHillContacts()
      }
    } catch (error) {
      console.error('Compliance report generation failed:', error)
      throw new Error(`Failed to generate compliance report: ${error.message}`)
    }
  }

  // Private helper methods
  private calculateReviewFees(projectValue: number): number {
    const baseFee = 200
    const valueFee = Math.max(100, projectValue * 0.001)
    return baseFee + valueFee
  }

  private getNextAvailableInspectionDate(preferredDate: Date): Date {
    // Mock logic - would check actual availability
    const nextWeekday = new Date(preferredDate)
    while (nextWeekday.getDay() === 0 || nextWeekday.getDay() === 6) {
      nextWeekday.setDate(nextWeekday.getDate() + 1)
    }
    return nextWeekday
  }

  private getInspectionRequirements(type: LibertyHillInspection['type']): string[] {
    const requirements: Record<LibertyHillInspection['type'], string[]> = {
      FOOTING: ['Excavation complete', 'Rebar in place', 'Forms ready'],
      FOUNDATION: ['Concrete poured and cured', 'Anchor bolts installed', 'Moisture barrier in place'],
      FRAMING: ['All framing complete', 'Sheathing installed', 'Windows and doors rough-opened'],
      ELECTRICAL: ['All electrical rough-in complete', 'Boxes and wiring installed', 'GFCI protection in place'],
      PLUMBING: ['All plumbing rough-in complete', 'Water and gas lines tested', 'Fixtures ready for connection'],
      HVAC: ['Ductwork installed', 'Equipment in place', 'System ready for testing'],
      INSULATION: ['All insulation installed', 'Vapor barriers in place', 'Access maintained'],
      DRYWALL: ['All drywall complete', 'Texture applied', 'Ready for final'],
      FINAL: ['All work complete', 'Utilities connected', 'Certificate of occupancy ready']
    }
    return requirements[type] || []
  }

  private async getProjectIdByPermit(permitNumber: string): Promise<string> {
    const project = await this.prisma.project.findFirst({
      where: { libertyHillPermitNumber: permitNumber }
    })
    return project?.id || 'unknown'
  }

  private getUtilityProvider(service: UtilityConnection['utilityType']): string {
    const providers: Record<UtilityConnection['utilityType'], string> = {
      WATER: 'Liberty Hill Municipal Utilities',
      SEWER: 'Liberty Hill Municipal Utilities',
      ELECTRIC: 'Oncor Electric Delivery',
      GAS: 'Atmos Energy',
      TRASH: 'Republic Services'
    }
    return providers[service]
  }

  private getUtilityConnectionFee(service: UtilityConnection['utilityType']): number {
    const fees: Record<UtilityConnection['utilityType'], number> = {
      WATER: 750,
      SEWER: 1200,
      ELECTRIC: 500,
      GAS: 300,
      TRASH: 0
    }
    return fees[service]
  }

  private getUtilityRequirements(service: UtilityConnection['utilityType']): string[] {
    const requirements: Record<UtilityConnection['utilityType'], string[]> = {
      WATER: ['Water meter application', 'Plumbing inspection passed', 'Service line installation'],
      SEWER: ['Sewer connection permit', 'Lateral line installation', 'City inspection'],
      ELECTRIC: ['Electrical inspection passed', 'Meter socket installed', 'Service panel ready'],
      GAS: ['Gas line pressure test', 'Meter location prepared', 'Appliance connections ready'],
      TRASH: ['Service agreement', 'Access road confirmed', 'Collection schedule selected']
    }
    return requirements[service] || []
  }

  private getUtilityContacts(service: UtilityConnection['utilityType']): UtilityConnection['contacts'] {
    const contacts: Record<UtilityConnection['utilityType'], UtilityConnection['contacts']> = {
      WATER: { phone: '(512) 515-5150', email: 'utilities@libertyhill.org', department: 'Utilities Department' },
      SEWER: { phone: '(512) 515-5150', email: 'utilities@libertyhill.org', department: 'Utilities Department' },
      ELECTRIC: { phone: '1-888-313-4747', email: 'newservice@oncor.com', department: 'New Service' },
      GAS: { phone: '1-888-286-6700', email: 'newservice@atmosenergy.com', department: 'New Service' },
      TRASH: { phone: '(512) 246-1700', email: 'newservice@republicservices.com', department: 'Residential Service' }
    }
    return contacts[service]
  }

  async disconnect(): Promise<void> {
    await this.prisma.$disconnect()
  }
}

// Factory function
export function createLibertyHillIntegration(): LibertyHillIntegrationService {
  return new LibertyHillIntegrationService()
}