import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { gmailService, type RFPEmailData } from '@/lib/gmail-integration-service'

export async function POST(request: NextRequest) {
  try {
    const { vendorIds, rfpData } = await request.json()
    
    if (!vendorIds || !Array.isArray(vendorIds) || !rfpData) {
      return NextResponse.json(
        { error: 'Vendor IDs and RFP data are required' },
        { status: 400 }
      )
    }

    // Create RFP record in database
    const rfp = await prisma.rFP.create({
      data: {
        projectId: rfpData.projectId,
        title: `${rfpData.trade} Services - ${rfpData.projectName}`,
        description: rfpData.description,
        category: rfpData.trade.toUpperCase(),
        requirements: {
          specifications: rfpData.requirements || [],
          timeline: rfpData.timeline,
          budget: rfpData.budget
        },
        timeline: rfpData.timeline,
        budget: rfpData.budget?.max,
        status: 'PUBLISHED',
        publishDate: new Date(),
        responseDeadline: new Date(rfpData.timeline.responseDeadline),
        invitedVendors: vendorIds,
        emailTemplate: 'rfp-standard',
        isAutoGenerated: true
      }
    })

    // Send RFP emails to vendors
    const emailResult = await gmailService.sendRFPEmails(vendorIds, rfpData)
    
    // Create RFP response records for tracking
    const responsePromises = vendorIds.map(vendorId => 
      prisma.rFPResponse.create({
        data: {
          rfpId: rfp.id,
          vendorId,
          status: 'RECEIVED', // Will be updated when responses come in
          submittedAt: new Date(),
          proposedCost: 0, // Will be updated when actual response is received
          timeline: {},
          laborCost: 0,
          materialCost: 0,
          equipmentCost: 0
        }
      }).catch(error => {
        console.error(`Failed to create RFP response record for vendor ${vendorId}:`, error)
        return null
      })
    )
    
    const responses = await Promise.all(responsePromises)
    const validResponses = responses.filter(Boolean)

    return NextResponse.json({
      rfpId: rfp.id,
      emailsSent: emailResult.sent,
      emailsFailed: emailResult.failed,
      responseRecordsCreated: validResponses.length,
      details: emailResult.results
    })
    
  } catch (error) {
    console.error('Failed to send RFP:', error)
    return NextResponse.json(
      { error: 'Failed to send RFP' },
      { status: 500 }
    )
  }
}